!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "width=device-width", :name => "viewport"}/
    %meta{:content => "initial-scale=1.0", :name => "viewport"}/
    %title Vivien Leroy is Fantattitude
    %meta{:name => "description", :content => "Vivien Leroy is an iOS developer from France, this is his website."}/
    %meta{:name => "author", :content => "Vivien Leroy"}/
    %link{:rel => "shortcut icon", :href => "favicon.ico"}/
    %link{:href => "style.css", :rel => "stylesheet", :type => "text/css"}/
  %body
    %header
      #header_text.text
        %h1 Vivien Leroy
        %p
          Software engineer
          %a#vcard{:href => "http://fantattitude.me/vivien.vcf"}> &#xe002;
      .overlay
    #social
      %a#bio.active{:href => "http://fantattitude.me"}> &#xe000;
      %a#blog{:href => "http://blog.fantattitude.me"}> &#xe001;
      %a#twitter{:href => "http://twitter.com/Fantattitude"}> &#xf309;
      %a#github{:href => "http://github.com/Fantattitude"}> &#xf300;
      %a#dribbble{:href => "http://dribbble.com/Fantattitude"}> &#xf31b;
      %a#lastfm{:href => "http://last.fm/user/Fantattitude"}> &#xf321;
    #presentation
      %h2 Vivien has an intense passion for computers.
      %p Be it development or system administration, Vivien always had this need to tinker with his computers. He also enjoys good ui/ux design and can’t help but stay hours long on design blogs and sites. He graduated as an IT engineer late 2012, worked as a web project manager at Lemon Interactive and is now iOS developer for AXA France.
    .separator
    #build
      %h2 He builds apps and websites for the masses.
      %pre
        :preserve
          def parse! arguments=ARGV, defaults=@defaults
              @defaults.dup.tap do |options|
                OptionParser.new do |parser|
                  parser.banner = "Usage: mailcatcher [options]"
                  parser.version = VERSION
          
                  parser.on("--ip IP", "Set the ip address of both servers") do |ip|
                    options[:smtp_ip] = options[:http_ip] = ip
                  end
          
                  parser.on("--smtp-ip IP", "Set the ip address of the smtp server") do |ip|
                    options[:smtp_ip] = ip
                  end
          
                  parser.on("--smtp-port PORT", Integer, "Set the port of the smtp server") do |port|
                    options[:smtp_port] = port
                  end
          
                  parser.on("--http-ip IP", "Set the ip address of the http server") do |ip|
                    options[:http_ip] = ip
                  end
          
                  parser.on("--http-port PORT", Integer, "Set the port address of the http server") do |port|
                    options[:http_port] = port
                  end
          
                  if mac?
                    parser.on("--[no-]growl", "Growl to the local machine when a message arrives") do |growl|
                      if growl and not growlnotify?
                        puts "You'll need to install growlnotify from the Growl installer."
                        puts
                        puts "See: http://growl.info/extras.php#growlnotify"
                        exit!
                      end
          
                      options[:growl] = growl
                    end
                  end
          
                  unless windows?
                    parser.on('-f', '--foreground', 'Run in the foreground') do
                      options[:daemon] = false
                    end
                  end
          
                  if browse?
                    parser.on('-b', '--browse', 'Open web browser') do
                      options[:browse] = true
                    end
                  end
          
                  parser.on('-v', '--verbose', 'Be more verbose') do
                    options[:verbose] = true
                  end
          
                  parser.on('-h', '--help', 'Display this help information') do
                    puts parser
                    exit!
                  end
                end.parse!
              end
            end
      .browser
        .bar
          /
          .left
          /
          .right
          /
          .mid
        .content
          .left
          .right
          .mid
            %p
              And I do it well using top notch technologies such as
              %span{"data-typer-targets" => "{ \"targets\" : [\"Ruby on Rails, HTML5, CSS3, Javascript\", \"PHP, (x)HTML, CSS, Javascript\", \"Cocoa, Objective-C\"]}"} Ruby on Rails, HTML5, CSS3, Javascript
              and more…
        .bottom
    .separator
    #portfolio
      #pokecenter
        %div
          .text
            %h2 Pokécenter
            %p His first experience with iOS, where he learnt about Cocoa Touch and developed his skills. Also his first time using a ßeta distribution platform, here TestFlight. Not released.
          .image
            %img{:alt => "Pokecenter.app screenshot", :src => "pokecenter.png", :width => "963px", :height => "804px"}/
    %footer
      Made on a
      %span 
      using Sketch.app &amp; Vim.
    %script{:src => "retina.js", :type => "text/javascript"}
    %script{:src => "jquery.js", :type => "text/javascript"}
    %script{:src => "jquery.typer.js", :type => "text/javascript"}
    %script{:src => "script.js", :type => "text/javascript"}
    :javascript
        var _paq = _paq || [];
        _paq.push(['trackPageView']);
        _paq.push(['enableLinkTracking']);
        (function() {
          var u=(("https:" == document.location.protocol) ? "https" : "http") + "://stats.fantattitude.me//";
          _paq.push(['setTrackerUrl', u+'piwik.php']);
          _paq.push(['setSiteId', 1]);
          var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript';
          g.defer=true; g.async=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
        })();
    %noscript
      %p
        %img{:src => "http://stats.fantattitude.me/piwik.php?idsite=1", :style => "border:0", :alt => ""
